package com.example.cpuscheduler;

import java.util.ArrayList;
import java.util.PriorityQueue;

public class Tests {
    public static void main(String[] args) {
        // Geberate test processes Process(pid, burst, arrival) or Process(pid, burst, priority, arrival)
        Process p0 = new Process(0, 10, 0);
        Process p1 = new Process(1, 2, 2);
        Process p2 = new Process(2, 5, 0);
        Process p3 = new Process(3, 2, 0, 8);

        PriorityQueue<Process> list = new PriorityQueue<Process>((px, py) -> px.getArrivalTime() - px.getArrivalTime());
        list.add(p0);
        list.add(p1);
        list.add(p2);
        // process p3 is added in the middle of the loop
        
        // Use your scheduler class here
        SJFPreemptive scheduler = new SJFPreemptive();

        // Gui loop. (Needs to run every second)
        // FInishes if no more processes are available or running in the scheduler
        int time = 0;
        while (true) {
            while (!list.isEmpty() && time == list.peek().getArrivalTime()) {
                scheduler.enqueue(list.poll());
            }

            if (time==8) scheduler.enqueue(p3);

            if (!scheduler.fetchNextTask(time) && list.isEmpty())
                break;

            time++;
        }

        // Print the gantt cahrt generated by the scheduler
        ArrayList<GanttProcess> ganttChart = scheduler.getGanttChart();
        for (GanttProcess p : ganttChart) {
            System.out.println("Pid = " + p.getPid() + " ran for = " + p.getRunningTime());
        }

        // Print turnaround or waiting or response time
        ArrayList<Process> completedQueue = scheduler.getCompletedProcesses();
        for (Process p : completedQueue) {
            System.out.println("P" + p.getPid() + " = " + p.calcTurnaroundTime());
        }
    }
}
